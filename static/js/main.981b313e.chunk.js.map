{"version":3,"sources":["style.js","assets/iconfont/iconfont.js","assets/global-style.js","application/Home/style.js","application/Rank/index.js","routes/index.js","application/Home/index.js","application/Recommend/index.js","application/Singers/index.js","App.js","serviceWorker.js","i18n.js","index.js"],"names":["GlobalStyle","createGlobalStyle","IconStyle","Top","styled","div","style","Tab","TabItem","React","path","component","memo","withTranslation","props","route","useTranslation","t","i18n","changeLanguage","lng","className","to","activeClassName","onClick","renderRoutes","routes","exact","render","App","Boolean","window","location","hostname","match","use","initReactI18next","init","resources","en","translation","translation_en","zh","translation_zh","fallbackLng","keySeparator","interpolation","escapeValue","Loader","ReactDOM","StrictMode","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"k5DAEO,IAAMA,EAAcC,YAAH,K,o6GCAjB,IAAMC,EAAYD,YAAH,K,+BCkBP,EACI,UADJ,EAGS,UAHT,EAQI,OARJ,EAWK,U,siCC5Bb,IAAME,EAAMC,IAAOC,IAAV,IAKEC,GAWLC,EAAMH,IAAOC,IAAV,IAKEC,EAIEA,EACJA,EAKSA,EACkBA,GAM9BE,EAAUJ,IAAOC,IAAV,K,OCjCLI,ICDA,GACX,CACIC,KAAM,IACNC,UCiCOF,IAAMG,KAAKC,YAAgB,SAAhBA,EAhC1B,SAAcC,GAAQ,IACZC,EAAUD,EAAVC,MADW,EAECC,YAAe,eAA3BC,EAFW,EAEXA,EAAGC,EAFQ,EAERA,KACLC,EAAiB,SAAAC,GACrBF,EAAKC,eAAeC,IAEtB,OACE,6BACE,kBAACjB,EAAD,KACE,0BAAMkB,UAAU,iBAAhB,WAEA,0BAAMA,UAAU,SAASJ,EAAE,UAC3B,0BAAMI,UAAU,mBAAhB,cAIF,kBAACd,EAAD,KACE,kBAAC,IAAD,CAASe,GAAG,aAAaC,gBAAgB,YAAW,kBAACf,EAAD,KAAS,8BAAOS,EAAE,QACtE,kBAAC,IAAD,CAASK,GAAG,WAAWC,gBAAgB,YAAW,kBAACf,EAAD,KAAS,8BAAOS,EAAE,QACpE,kBAAC,IAAD,CAASK,GAAG,QAAQC,gBAAgB,YAAW,kBAACf,EAAD,KAAS,8BAAOS,EAAE,SAGnE,4BAAQO,QAAS,kBAAML,EAAe,QAAtC,MACA,4BAAQK,QAAS,kBAAML,EAAe,QAAtC,MAICM,YAAaV,EAAMW,aD3BlBA,OAAQ,CACJ,CAEIhB,KAAM,IACNiB,OAAO,EACPC,OAAQ,kBACJ,kBAAC,IAAD,CAAUN,GAAI,iBAItB,CACIZ,KAAM,aACNC,UEfDF,IAAMG,MANrB,SAAoBE,GAClB,OACE,8CFqBQ,CACIJ,KAAM,WACNC,UGnBDF,IAAMG,MANrB,SAAkBE,GAChB,OACE,4CHyBQ,CACIJ,KAAM,QACNC,UDvBDF,IAAMG,MANrB,SAAcE,GACV,OACI,4CKeOe,MAVf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC7B,EAAD,MACA,kBAACE,EAAD,MACCuB,YAAaC,KCFAI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oCCXNhB,IACKiB,IAAIC,KAGJC,KAAK,CACFC,UAAU,CACNC,GAAI,CACAC,YAAaC,GAEjBC,GAAI,CACAF,YAAaG,IAGrBvB,IAAK,KACLwB,YAAa,KAEbC,cAAc,EAEdC,cAAe,CACXC,aAAa,KAIV7B,EAAf,EAAeA,ICvBT8B,EAAS,kBACb,yBAAK3B,UAAU,OAEb,6CAIJ4B,IAASrB,OACP,kBAAC,IAAMsB,WAAP,KACE,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OAEhB,kBAAC,EAAD,QAINC,SAASC,eAAe,SF6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.981b313e.chunk.js","sourcesContent":["import { createGlobalStyle } from'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n\thtml, body, div, span, applet, object, iframe,\n\th1, h2, h3, h4, h5, h6, p, blockquote, pre,\n\ta, abbr, acronym, address, big, cite, code,\n\tdel, dfn, em, img, ins, kbd, q, s, samp,\n\tsmall, strike, strong, sub, sup, tt, var,\n\tb, u, i, center,\n\tdl, dt, dd, ol, ul, li,\n\tfieldset, form, label, legend,\n\ttable, caption, tbody, tfoot, thead, tr, th, td,\n\tarticle, aside, canvas, details, embed, \n\tfigure, figcaption, footer, header, hgroup, \n\tmenu, nav, output, ruby, section, summary,\n\ttime, mark, audio, video {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tborder: 0;\n\t\tfont-size: 100%;\n\t\tfont: inherit;\n\t\tvertical-align: baseline;\n\t}\n\t/* HTML5 display-role reset for older browsers */\n\tarticle, aside, details, figcaption, figure, \n\tfooter, header, hgroup, menu, nav, section {\n\t\tdisplay: block;\n\t}\n\tbody {\n\t\tline-height: 1;\n\t}\n\thtml, body {\n\t\tbackground: #f2f3f4;;\n\t}\n\tol, ul {\n\t\tlist-style: none;\n\t}\n\tblockquote, q {\n\t\tquotes: none;\n\t}\n\tblockquote:before, blockquote:after,\n\tq:before, q:after {\n\t\tcontent: '';\n\t\tcontent: none;\n\t}\n\ttable {\n\t\tborder-collapse: collapse;\n\t\tborder-spacing: 0;\n\t}\n\ta {\n\t\ttext-decoration: none;\n\t\tcolor: #fff;\n    }\n`","import {createGlobalStyle} from 'styled-components';\n\nexport const IconStyle = createGlobalStyle`\n@font-face {font-family: \"iconfont\";\n  src: url('iconfont.eot?t=1589162062201'); /* IE9 */\n  src: url('iconfont.eot?t=1589162062201#iefix') format('embedded-opentype'), /* IE6-IE8 */\n  url('data:application/x-font-woff2;charset=utf-8;base64,d09GMgABAAAAAALIAAsAAAAABnAAAAJ9AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHEIGVgCCcAp4gRYBNgIkAwgLBgAEIAWEbQc0G8AFyK4wbuFJGyLJiu6GkUO+69/l2xcCgiAeHvf7nbvtKyZJNRJFs2gik0iFBJWWCIUsVj2T37DTjukXKfHz7IJmHFGAhdnAtrVmBRa+negCuVYRPrDeucvuAabERjxpQCNeGHaDWy0QCGh+xC47bavI0/bL4uBy+v8VUCDzgHKZY/KYgIGlAY21KbIiibxh7AKXcJxA2xgC7rUG556IwhoXiCtVME8k51YUFmsK9ZqlRdyqaabr9MXjJvx+/ClGhKSWWQWHl03ZU/mEnZB31c6Fj/AQ0OoaMlYAhTitDe/zC0bE2uGAKWBfucEnqsrXir2qBPvrrOxOMALZ98RxubeanUCJ26cAG6NuJQ13Li8/E368lM7vLpjNs2t+7OkpV1lmxVS7dBvW0qj57x4e7j1Bphp/p1vURsnHe7z4/4IWD7NINgOZ/As/YgYM+DueLR5Uz3lzAkQw9vHrPWv/kY4CXv//MHRWz6X6WYHm7i3Bb+L0rCs6z9KkonJqrcnUqLEJbW1UsL3fHSsfuqd4aBq6M2vDaApZ0wxaCCtQ02EV6po2oW2ZXt1hQOMXpYUlE0DotSDpdg9Zr40WwoGaYR/U9YYf2s5jYMsOc6HGdgnZCGUwc8iSbXFHN4pFuacoxgajLC8kXSINVR/IbL4Ya6OFNMeMPhHFMeIQyDZBgdPQMGwoZGsojbJpNHLKPMfr3pS1tumJ2UUQM4JkwJgDmcRm4X7rkVjp86eQMGZgqKWoRn8JkSG1cyAxogfaFlu9iu7llW5CKBpGOBAQmwkoMAgZDDZQ6gdpkGQkK40IOsq43Sz0FWfXl5ofkMXKsBQp7G5Z+5JZQmaa6qs8Hg==') format('woff2'),\n  url('iconfont.woff?t=1589162062201') format('woff'),\n  url('iconfont.ttf?t=1589162062201') format('truetype'), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n  url('iconfont.svg?t=1589162062201#iconfont') format('svg'); /* iOS 4.1- */\n}\n\n.iconfont {\n  font-family: \"iconfont\" !important;\n  font-size: 16px;\n  font-style: normal;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.icon-fangdajing:before {\n  content: \"\\e637\";\n}\n`","const extendClick = () => {\n    return (\n        `\n        position: relative;\n        &: before {\n            content: '';\n            positionL absolute;\n            top: -10px; bottomL -10px; left: -10px; right: -10px;\n        };\n    `)\n}\n\nconst noWrap = () => {\n    return `\n        text-overflow: ellipsis;\n        overflow: hidden;\n        white-space: nowrap;\n    `\n}\n\nexport default {\n    'theme-color': '#d44439',\n    'theme-color-shadow': 'rgba(212, 68, 57, .5)',\n    'font-color-light': '#f1f1f1',\n    'font-color-desc': '#2E3030',\n    'font-color-desc-v2': '#bba8a8',\n    'font-size-ss': '10px',\n    'font-size-s': '12px',\n    'font-size-m': '14px',\n    'font-size-l': '16px',\n    'font-size-ll': '18px',\n    'border-color': '#e4e4e4',\n    'background-color': '#f2f3f4',\n    'background-color-shadow': 'rgba(0,0,0,0.3)',\n    'highlight-background-color': '#fff',\n    extendClick,\n    noWrap\n}","import styled from \"styled-components\";\nimport style from '../../assets/global-style'\n\nexport const Top = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    padding: 5px 10px;\n    background: ${style[\"theme-color\"]};\n    &>span{\n        line-height: 40px;\n        color: #f1f1f1;\n        font-size: 20px;\n        &.iconfont {\n            font-size: 25px;\n        }\n    }\n`\n\nexport const Tab = styled.div`\n    height: 44px;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    background: ${style[\"theme-color\"]};\n    a {\n        flex: 1;\n        padding: 2px 0;\n        font-size:${style[\"font-size-m\"]};\n        color:${style['border-color']};\n        &.selected {\n            span {\n                padding: 3px 0;\n                font-weight:700;\n                color: ${style['font-color-light']};\n                border-bottom: 2px solid ${style['font-color-light']};\n            }\n        }\n    }\n`\n\nexport const TabItem = styled.div`\n    height: 100%;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n`","import React from 'react';\n\nfunction Rank(props) {\n    return (\n        <div>Rank</div>\n    )\n}\n\nexport default React.memo(Rank);","import React from 'react'\nimport { Redirect } from 'react-router-dom'\nimport Home from '../application/Home'\nimport Recommend from '../application/Recommend'\nimport Singers from '../application/Singers'\nimport Rank from '../application/Rank'\n\nexport default [\n    {\n        path: \"/\",\n        component: Home,\n        routes: [\n            {\n\n                path: \"/\",\n                exact: true,\n                render: () => (\n                    <Redirect to={\"/recommend\"} />\n                )\n\n            },\n            {\n                path: '/recommend',\n                component: Recommend,\n            },\n            {\n                path: '/singers',\n                component: Singers\n            },\n            {\n                path: '/rank',\n                component: Rank\n            }\n        ]\n    }\n]","import React from 'react';\nimport { renderRoutes } from 'react-router-config'\nimport { useTranslation, Trans, withTranslation } from \"react-i18next\";\n\nimport {\n  Top,\n  Tab,\n  TabItem\n} from \"./style\";\nimport { NavLink } from \"react-router-dom\";\n\nfunction Home(props) {\n  const { route } = props\n  const { t, i18n } = useTranslation('translation');\n  const changeLanguage = lng => {\n    i18n.changeLanguage(lng);\n  };\n  return (\n    <div>\n      <Top>\n        <span className=\"iconfont menu\">&#xe65c</span>\n        {/* deal the fonts later tgt */}\n        <span className=\"title\">{t('title')}</span>\n        <span className=\"iconfont search\">   &#xe637;\n           {/* <i className=\"iconfont\">&#xe637;</i> */}\n        </span>\n      </Top>\n      <Tab>\n        <NavLink to=\"/recommend\" activeClassName=\"selected\"><TabItem><span>{t('1')}</span></TabItem></NavLink>\n        <NavLink to=\"/singers\" activeClassName=\"selected\"><TabItem><span>{t('2')}</span></TabItem></NavLink>\n        <NavLink to=\"/rank\" activeClassName=\"selected\"><TabItem><span>{t('3')}</span></TabItem></NavLink>\n      </Tab>\n\n      <button onClick={() => changeLanguage('zh')}>zh</button>\n      <button onClick={() => changeLanguage('en')}>en</button>\n\n      {/* <div>{t('description.part1')}</div>  its not working = =! */}\n\n      {renderRoutes(route.routes)}\n    </div>\n  )\n}\n\nexport default React.memo(withTranslation('common')(Home));\n","import React from 'react';\n\nfunction Recommend (props) {\n  return (\n    <div>Recommend</div>\n  )\n}\n\nexport default React.memo (Recommend);","import React from 'react';\n\nfunction Singers (props) {\n  return (\n    <div>Singers</div>\n  )\n}\n\nexport default React.memo (Singers);","import React from 'react';\nimport { GlobalStyle } from './style';\nimport { IconStyle } from './assets/iconfont/iconfont';\nimport { renderRoutes } from 'react-router-config';\nimport routes from './routes'\nimport {\n  BrowserRouter as Router,\n} from 'react-router-dom'\n\nfunction App() {\n  return (\n    <Router>\n      <GlobalStyle></GlobalStyle>\n      <IconStyle></IconStyle>\n      {renderRoutes(routes)}\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n// import LanguageDetector from 'i18next-browser-languagedetector'; todo\nimport translation_en from \"./locales/en/translation\";\nimport translation_zh from \"./locales/zh/translation\";\n\n\ni18n\n    .use(initReactI18next) // passes i18n down to react-i18next\n    //   .use(LanguageDetector)\n    // .use(backend) figure out how to use backend!\n    .init({\n        resources:{\n            en: {\n                translation: translation_en\n            },\n            zh: {\n                translation: translation_zh\n            },\n        },\n        lng: \"en\",\n        fallbackLng: 'en',\n\n        keySeparator: false, // we do not use keys in form messages.welcome\n\n        interpolation: {\n            escapeValue: false // react already safes from xss\n        }\n    });\n\nexport default i18n;","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport i18n from './i18n';\n// import { I18nextProvider } from 'react-i18next'\n\nconst Loader = () => (\n  <div className=\"App\">\n    {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n    <div>loading...</div>\n  </div>\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Suspense fallback={<Loader />}>\n      {/* <I18nextProvider i18n={i18n} > */}\n        <App />\n      {/* </I18nextProvider> */}\n    </Suspense>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}